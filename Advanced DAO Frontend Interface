import React, { useState, useEffect } from 'react';
import { 
  AlertCircle, 
  Users, 
  Vote, 
  Plus, 
  Clock, 
  CheckCircle, 
  XCircle, 
  Wallet, 
  TrendingUp, 
  Eye, 
  User, 
  Shield 
} from 'lucide-react';

const AdvancedDAOFrontend = () => {
  const [account, setAccount] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [memberInfo, setMemberInfo] = useState(null);
  const [proposals, setProposals] = useState([]);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [loading, setLoading] = useState(false);
  const [notification, setNotification] = useState({ message: '', type: '' });

  const [proposalForm, setProposalForm] = useState({
    title: '',
    description: '',
    recipient: '',
    amount: ''
  });
  const [voteForm, setVoteForm] = useState({
    proposalId: '',
    support: true,
    credits: 1
  });
  const [delegateAddress, setDelegateAddress] = useState('');

  const [contractData, setContractData] = useState({
    memberCount: 24,
    totalProposals: 8,
    treasuryBalance: 15.67,
    activeProposals: 3
  });

  const mockProposals = [
    {
      id: 1,
      title: "Upgrade Treasury Management System",
      description: "Implement automated treasury rebalancing with DeFi integration",
      proposer: "0x1234...5678",
      recipient: "0xabcd...ef01",
      amount: 5.5,
      forVotes: 45,
      againstVotes: 12,
      state: "Active",
      endTime: Date.now() + 5 * 24 * 60 * 60 * 1000,
      hasVoted: false
    },
    {
      id: 2,
      title: "Community Development Fund",
      description: "Allocate funds for developer grants and community initiatives",
      proposer: "0x2345...6789",
      recipient: "0xbcde...f012",
      amount: 10.0,
      forVotes: 78,
      againstVotes: 5,
      state: "Succeeded",
      endTime: Date.now() - 2 * 24 * 60 * 60 * 1000,
      hasVoted: true
    },
    {
      id: 3,
      title: "Marketing Campaign Budget",
      description: "Fund Q4 marketing initiatives and partnerships",
      proposer: "0x3456...789a",
      recipient: "0xcdef...0123",
      amount: 3.2,
      forVotes: 23,
      againstVotes: 34,
      state: "Defeated",
      endTime: Date.now() - 1 * 24 * 60 * 60 * 1000,
      hasVoted: true
    }
  ];

  useEffect(() => {
    setProposals(mockProposals);
  }, []);

  const showNotification = (message, type = 'info') => {
    setNotification({ message, type });
    setTimeout(() => setNotification({ message: '', type: '' }), 5000);
  };

  const formatTimeRemaining = (endTime) => {
    const now = Date.now();
    const remaining = endTime - now;
    
    if (remaining <= 0) return 'Ended';
    
    const days = Math.floor(remaining / (24 * 60 * 60 * 1000));
    const hours = Math.floor((remaining % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
    
    if (days > 0) return `${days}d ${hours}h remaining`;
    return `${hours}h remaining`;
  };

  const getStateColor = (state) => {
    switch (state) {
      case 'Active': return 'text-blue-600 bg-blue-100';
      case 'Succeeded': return 'text-green-600 bg-green-100';
      case 'Defeated': return 'text-red-600 bg-red-100';
      case 'Executed': return 'text-purple-600 bg-purple-100';
      case 'Canceled': return 'text-gray-600 bg-gray-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const connectWallet = async () => {
    setLoading(true);
    try {
      setTimeout(() => {
        setAccount('0x1234567890123456789012345678901234567890');
        setIsConnected(true);
        setMemberInfo({
          isMember: true,
          votingPower: 12,
          delegatedPower: 5,
          delegate: '',
          joinedAt: Date.now() - 30 * 24 * 60 * 60 * 1000
        });
        showNotification('Wallet connected successfully!', 'success');
        setLoading(false);
      }, 1500);
    } catch (error) {
      showNotification('Failed to connect wallet', 'error');
      setLoading(false);
    }
  };

  const joinDAO = async () => {
    setLoading(true);
    try {
      setTimeout(() => {
        setMemberInfo({
          isMember: true,
          votingPower: 5,
          delegatedPower: 0,
          delegate: '',
          joinedAt: Date.now()
        });
        setContractData(prev => ({ ...prev, memberCount: prev.memberCount + 1 }));
        showNotification('Successfully joined the DAO!', 'success');
        setLoading(false);
      }, 2000);
    } catch (error) {
      showNotification('Failed to join DAO', 'error');
      setLoading(false);
    }
  };

  const createProposal = async () => {
    setLoading(true);
    try {
      setTimeout(() => {
        const newProposal = {
          id: proposals.length + 1,
          title: proposalForm.title,
          description: proposalForm.description,
          proposer: account,
          recipient: proposalForm.recipient,
          amount: parseFloat(proposalForm.amount || 0),
          forVotes: 0,
          againstVotes: 0,
          state: "Active",
          endTime: Date.now() + 7 * 24 * 60 * 60 * 1000,
          hasVoted: false
        };
        setProposals([newProposal, ...proposals]);
        setProposalForm({ title: '', description: '', recipient: '', amount: '' });
        setContractData(prev => ({ ...prev, totalProposals: prev.totalProposals + 1, activeProposals: prev.activeProposals + 1 }));
        showNotification('Proposal created successfully!', 'success');
        setActiveTab('proposals');
        setLoading(false);
      }, 2000);
    } catch (error) {
      showNotification('Failed to create proposal', 'error');
      setLoading(false);
    }
  };

  const castVote = async (proposalId, support, credits) => {
    setLoading(true);
    try {
      setTimeout(() => {
        setProposals(proposals.map(p => {
          if (p.id === proposalId) {
            return {
              ...p,
              forVotes: support ? p.forVotes + credits : p.forVotes,
              againstVotes: !support ? p.againstVotes + credits : p.againstVotes,
              hasVoted: true
            };
          }
          return p;
        }));
        showNotification(`Vote cast successfully! ${credits} credits for ${support ? 'support' : 'opposition'}`, 'success');
        setLoading(false);
      }, 1500);
    } catch (error) {
      showNotification('Failed to cast vote', 'error');
      setLoading(false);
    }
  };

  const delegateVoting = async () => {
    setLoading(true);
    try {
      setTimeout(() => {
        setMemberInfo(prev => ({ ...prev, delegate: delegateAddress }));
        setDelegateAddress('');
        showNotification('Voting power delegated successfully!', 'success');
        setLoading(false);
      }, 1500);
    } catch (error) {
      showNotification('Failed to delegate voting power', 'error');
      setLoading(false);
    }
  };

  const NotificationBanner = () => {
    if (!notification.message) return null;
    
    const bgColor = notification.type === 'error' ? 'bg-red-100 border-red-500 text-red-700' :
                   notification.type === 'success' ? 'bg-green-100 border-green-500 text-green-700' :
                   'bg-blue-100 border-blue-500 text-blue-700';

    return (
      <div className={`border-l-4 p-4 mb-6 ${bgColor}`}>
        <div className="flex items-center">
          <AlertCircle className="w-5 h-5 mr-2" />
          <p>{notification.message}</p>
        </div>
      </div>
    );
  };

  const DashboardTab = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 p-6 rounded-xl text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-blue-100">Total Members</p>
              <p className="text-3xl font-bold">{contractData.memberCount}</p>
            </div>
            <Users className="w-12 h-12 text-blue-200" />
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-green-500 to-green-600 p-6 rounded-xl text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-green-100">Treasury Balance</p>
              <p className="text-3xl font-bold">{contractData.treasuryBalance} ETH</p>
            </div>
            <Wallet className="w-12 h-12 text-green-200" />
          </div>
        </div>

        <div className="bg-gradient-to-r from-purple-500 to-purple-600 p-6 rounded-xl text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-purple-100">Total Proposals</p>
              <p className="text-3xl font-bold">{contractData.totalProposals}</p>
            </div>
            <Vote className="w-12 h-12 text-purple-200" />
          </div>
        </div>

        <div className="bg-gradient-to-r from-orange-500 to-orange-600 p-6 rounded-xl text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-orange-100">Active Proposals</p>
              <p className="text-3xl font-bold">{contractData.activeProposals}</p>
            </div>
            <TrendingUp className="w-12 h-12 text-orange-200" />
          </div>
        </div>
      </div>

      {memberInfo && (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-semibold mb-4 flex items-center">
            <User className="w-6 h-6 mr-2" />
            Your Member Profile
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="text-center p-4 bg-gray-50 rounded-lg">
              <p className="text-gray-600">Your Voting Power</p>
              <p className="text-2xl font-bold text-blue-600">{memberInfo.votingPower}</p>
            </div>
            <div className="text-center p-4 bg-gray-50 rounded-lg">
              <p className="text-gray-600">Delegated Power</p>
              <p className="text-2xl font-bold text-green-600">{memberInfo.delegatedPower}</p>
            </div>
            <div className="text-center p-4 bg-gray-50 rounded-lg">
              <p className="text-gray-600">Total Power</p>
              <p className="text-2xl font-bold text-purple-600">{memberInfo.votingPower + memberInfo.delegatedPower}</p>
            </div>
          </div>
          {memberInfo.delegate && (
            <div className="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <p className="text-yellow-800">
                <Shield className="w-4 h-4 inline mr-1" />
                You have delegated your voting power to: <span className="font-mono">{memberInfo.delegate}</span>
              </p>
            </div>
          )}
        </div>
      )}

      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-xl font-semibold mb-4">Recent Activity</h3>
        <div className="space-y-3">
          {proposals.slice(0, 3).map(proposal => (
            <div key={proposal.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
              <div>
                <p className="font-medium">{proposal.title}</p>
                <p className="text-sm text-gray-600">by {proposal.proposer.slice(0, 6)}...{proposal.proposer.slice(-4)}</p>
              </div>
              <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStateColor(proposal.state)}`}>
                {proposal.state}
              </span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const ProposalsTab = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Governance Proposals</h2>
        <button
          onClick={() => setActiveTab('create')}
          className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center"
        >
          <Plus className="w-4 h-4 mr-2" />
          Create Proposal
        </button>
      </div>

      <div className="space-y-4">
        {proposals.map(proposal => (
          <div key={proposal.id} className="bg-white rounded-xl shadow-lg p-6 border hover:shadow-xl transition-shadow">
            <div className="flex justify-between items-start mb-4">
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-2">
                  <h3 className="text-xl font-semibold">{proposal.title}</h3>
                  <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStateColor(proposal.state)}`}>
                    {proposal.state}
                  </span>
                </div>
                <p className="text-gray-600 mb-3">{proposal.description}</p>
                <div className="flex items-center gap-4 text-sm text-gray-500">
                  <span>Proposed by {proposal.proposer.slice(0, 6)}...{proposal.proposer.slice(-4)}</span>
                  {proposal.amount > 0 && <span>Amount: {proposal.amount} ETH</span>}
                </div>
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-500 flex items-center">
                  <Clock className="w-4 h-4 mr-1" />
                  {formatTimeRemaining(proposal.endTime)}
                </p>
              </div>
            </div>

            <div className="mb-4">
              <div className="flex justify-between text-sm mb-2">
                <span className="text-green-600">For: {proposal.forVotes}</span>
                <span className="text-red-600">Against: {proposal.againstVotes}</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className="bg-green-500 h-2 rounded-l-full"
                  style={{ width: `${(proposal.forVotes / (proposal.forVotes + proposal.againstVotes + 1)) * 100}%` }}
                ></div>
              </div>
            </div>

            {proposal.state === 'Active' && memberInfo && !proposal.hasVoted && (
              <div className="flex gap-2">
                <input
                  type="number"
                  min="1"
                  max={memberInfo.votingPower + memberInfo.delegatedPower}
                  value={voteForm.proposalId === proposal.id ? voteForm.credits : 1}
                  onChange={(e) => setVoteForm({ ...voteForm, proposalId: proposal.id, credits: parseInt(e.target.value) })}
                  className="w-20 px-2 py-1 border rounded"
                  placeholder="Credits"
                />
                <button
                  onClick={() => castVote(proposal.id, true, voteForm.proposalId === proposal.id ? voteForm.credits : 1)}
                  disabled={loading}
                  className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition-colors flex items-center"
                >
                  <CheckCircle className="w-4 h-4 mr-1" />
                  Support
                </button>
                <button
                  onClick={() => castVote(proposal.id, false, voteForm.proposalId === proposal.id ? voteForm.credits : 1)}
                  disabled={loading}
                  className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition-colors flex items-center"
                >
                  <XCircle className="w-4 h-4 mr-1" />
                  Oppose
                </button>
              </div>
            )}

            {proposal.hasVoted && (
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                <p className="text-blue-800 flex items-center">
                  <Eye className="w-4 h-4 mr-2" />
                  You have already voted on this proposal
                </p>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );

  const CreateProposalTab = () => (
    <div className="max-w-2xl mx-auto">
      <div className="bg-white rounded-xl shadow-lg p-8">
        <h2 className="text-2xl font-bold mb-6">Create New Proposal</h2>
        
        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Proposal Title</label>
            <input
              type="text"
              value={proposalForm.title}
              onChange={(e) => setProposalForm({ ...proposalForm, title: e.target.value })}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter a clear, descriptive title"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
            <textarea
              value={proposalForm.description}
              onChange={(e) => setProposalForm({ ...proposalForm, description: e.target.value })}
              rows={4}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Provide detailed information about your proposal"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Recipient Address (Optional)</label>
            <input
              type="text"
              value={proposalForm.recipient}
              onChange={(e) => setProposalForm({ ...proposalForm, recipient: e.target.value })}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="0x... (only needed for funding proposals)"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Funding Amount (ETH)</label>
            <input
              type="number"
              step="0.01"
              min="0"
              value={proposalForm.amount}
              onChange={(e) => setProposalForm({ ...proposalForm, amount: e.target.value })}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="0.0 (leave empty for non-funding proposals)"
            />
          </div>

          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <p className="text-yellow-800 text-sm">
              <AlertCircle className="w-4 h-4 inline mr-1" />
              Creating a proposal requires a deposit of 0.1 ETH, which will be returned if the proposal passes or kept by the treasury if it fails.
            </p>
          </div>

          <div className="flex gap-4">
            <button
              onClick={() => setActiveTab('proposals')}
              className="flex-1 px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={createProposal}
              disabled={loading}
              className="flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
            >
              {loading ? 'Creating...' : 'Create Proposal'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  const DelegationTab = () => (
    <div className="max-w-2xl mx-auto space-y-6">
      <div className="bg-white rounded-xl shadow-lg p-8">
        <h2 className="text-2xl font-bold mb-6">Voting Power Delegation</h2>
        
        {memberInfo?.delegate ? (
          <div className="space-y-4">
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <p className="text-blue-800">
                <Shield className="w-5 h-5 inline mr-2" />
                You have delegated your voting power to:
              </p>
              <p className="font-mono text-lg mt-2">{memberInfo.delegate}</p>
            </div>
            <button
              onClick={() => {
                setMemberInfo(prev => ({ ...prev, delegate: '' }));
                showNotification('Delegation revoked successfully!', 'success');
              }}
              className="w-full px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              Revoke Delegation
            </button>
          </div>
        ) : (
          <div className="space-y-6">
            <p className="text-gray-600">
              Delegate your voting power to a trusted member who can vote on your behalf. You can revoke this delegation at any time.
            </p>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Delegate Address</label>
              <input
                type="text"
                value={delegateAddress}
                onChange={(e) => setDelegateAddress(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="0x... (must be a DAO member)"
              />
            </div>

            <button
              onClick={delegateVoting}
              disabled={!delegateAddress || loading}
              className="w-full px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
            >
              {loading ? 'Delegating...' : 'Delegate Voting Power'}
            </button>
          </div>
        )}
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      <div className="container mx-auto px-4 py-8 max-w-7xl">
        <div className="mb-8">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <div>
              <h1 className="text-4xl font-bold text-gray-800 mb-2">Advanced DAO</h1>
              <p className="text-gray-600">Quadratic Voting & Delegation System</p>
            </div>
            
            {!isConnected ? (
              <button
                onClick={connectWallet}
                disabled={loading}
                className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center"
              >
                <Wallet className="w-5 h-5 mr-2" />
                {loading ? 'Connecting...' : 'Connect Wallet'}
              </button>
            ) : (
              <div className="text-right">
                <p className="text-sm text-gray-600">Connected as:</p>
                <p className="font-mono text-sm bg-gray-100 px-3 py-1 rounded">
                  {account.slice(0, 6)}...{account.slice(-4)}
                </p>
              </div>
            )}
          </div>
        </div>

        <NotificationBanner />

        {isConnected && (!memberInfo || !memberInfo.isMember) && (
          <div className="mb-8 bg-white rounded-xl shadow-lg p-8 text-center">
            <h2 className="text-2xl font-bold mb-4">Join the DAO</h2>
            <p className="text-gray-600 mb-6">
              Become a member by paying the membership fee of 0.01 ETH. Your voting power will be calculated using quadratic scaling.
            </p>
            <button
              onClick={joinDAO}
              disabled={loading}
              className="bg-green-600 text-white px-8 py-3 rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50"
            >
              {loading ? 'Joining...' : 'Join DAO (0.01 ETH)'}
            </button>
          </div>
        )}

        {isConnected && memberInfo?.isMember && (
          <>
            <div className="mb-8">
              <nav className="flex space-x-1 bg-white p-1 rounded-xl shadow-lg">
                {[
                  { id: 'dashboard', label: 'Dashboard', icon: TrendingUp },
                  { id: 'proposals', label: 'Proposals', icon: Vote },
                  { id: 'create', label: 'Create', icon: Plus },
                  { id: 'delegation', label: 'Delegation', icon: Users },
                ].map(({ id, label, icon: Icon }) => (
                  <button
                    key={id}
                    onClick={() => setActiveTab(id)}
                    className={`flex items-center px-6 py-3 rounded-lg font-medium transition-colors ${
                      activeTab === id
                        ? 'bg-blue-600 text-white shadow-md'
                        : 'text-gray-600 hover:bg-gray-50'
                    }`}
                  >
                    <Icon className="w-5 h-5 mr-2" />
                    {label}
                  </button>
                ))}
              </nav>
            </div>

            <div>
              {activeTab === 'dashboard' && <DashboardTab />}
              {activeTab === 'proposals' && <ProposalsTab />}
              {activeTab === 'create' && <CreateProposalTab />}
              {activeTab === 'delegation' && <DelegationTab />}
            </div>
          </>
        )}

        <div className="mt-16 text-center text-gray-500">
          <p>Advanced DAO with Quadratic Voting & Delegation</p>
          <p className="text-sm mt-1">Built on Core Testnet 2</p>
        </div>
      </div>
    </div>
  );
};

export default AdvancedDAOFrontend;
